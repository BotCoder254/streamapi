<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title><%= title %> - StreamAPI Player</title>
    <!-- Tailwind CSS via CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Animation library -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <!-- Video.js CSS -->
    <link href="https://vjs.zencdn.net/8.10.0/video-js.css" rel="stylesheet" />
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #000;
            overflow: hidden;
        }
        
        #player-container {
            position: relative;
            width: 100vw;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            touch-action: none;
        }
        
        #player-iframe {
            width: 100%;
            height: 100%;
            border: none;
        }
        
        /* Quick Actions Menu */
        .quick-actions {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: none;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 20px;
            z-index: 1000;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            min-width: 300px;
        }
        
        .quick-action-btn {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            padding: 15px;
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
            aspect-ratio: 1;
        }
        
        .quick-action-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.05);
        }
        
        .quick-action-btn i {
            font-size: 24px;
            margin-bottom: 8px;
        }
        
        .quick-action-btn span {
            font-size: 12px;
            text-align: center;
        }
        
        /* Player Controls */
        .player-controls {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 20px;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s ease;
            background: rgba(0, 0, 0, 0.7);
            padding: 10px 20px;
            border-radius: 30px;
            pointer-events: all;
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            touch-action: none;
        }
        
        .player-controls:hover {
            opacity: 1;
        }
        
        .control-button {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 10px;
            transition: all 0.2s ease;
            pointer-events: all;
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
            touch-action: none;
            -webkit-tap-highlight-color: transparent;
        }
        
        .control-button:hover {
            transform: scale(1.1);
            background: rgba(255, 255, 255, 0.2);
        }
        
        .control-button:active {
            transform: scale(0.95);
        }
        
        .mobile-touch-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2;
            display: none;
            touch-action: none;
        }
        
        @media (max-width: 768px) {
            .mobile-touch-overlay {
                display: block;
            }
            
            .player-controls {
                bottom: 40px;
                opacity: 1;
                padding: 15px 25px;
                background: rgba(0, 0, 0, 0.85);
            }
            
            .control-button {
                width: 48px;
                height: 48px;
                font-size: 28px;
            }

            .vjs-big-play-button {
                width: 60px !important;
                height: 60px !important;
                line-height: 60px !important;
            }
        }
        
        .ad-overlay {
            display: none !important;
        }
        
        [class*="ad-"], [id*="ad-"],
        [class*="popup"], [id*="popup"] {
            display: none !important;
        }
        
        /* Improved loading animation */
        .loading {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 30;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
        }
        
        @keyframes pulse-ring {
            0% { transform: scale(0.8); opacity: 0.8; }
            50% { transform: scale(1.1); opacity: 0.5; }
            100% { transform: scale(0.8); opacity: 0.8; }
        }
        
        @keyframes pulse-dot {
            0% { transform: scale(0.8); }
            50% { transform: scale(1); }
            100% { transform: scale(0.8); }
        }
        
        .spinner-container {
            position: relative;
            margin-bottom: 24px;
        }
        
        .spinner-ring {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background-color: rgba(16, 185, 129, 0.2);
            animation: pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite;
        }
        
        .spinner {
            position: relative;
            width: 60px;
            height: 60px;
            border: 3px solid rgba(255, 255, 255, 0.1);
            border-left-color: #10B981;
            border-radius: 50%;
            animation: spin 1s linear infinite, pulse-dot 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .iframe-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            transition: opacity 0.8s ease;
        }
        
        .iframe-container.loaded {
            opacity: 1;
        }
        
        iframe {
            width: 100%;
            height: 100%;
            border: none;
            background-color: #000;
        }
        
        /* Top info bar */
        .player-info {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            padding: 16px 20px;
            background: linear-gradient(to bottom, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0) 100%);
            z-index: 20;
            display: flex;
            justify-content: space-between;
            align-items: center;
            opacity: 1;
            transition: opacity 0.3s ease, transform 0.3s ease;
            transform: translateY(0);
        }
        
        .player-info.hidden {
            opacity: 0;
            transform: translateY(-100%);
        }
        
        /* Additional player controls */
        .additional-controls {
            position: absolute;
            bottom: 20px;
            left: 20px;
            z-index: 20;
            display: flex;
            gap: 12px;
        }
        
        @media (max-width: 640px) {
            .additional-controls {
                bottom: 15px;
                left: 15px;
            }
        }
        
        /* Custom video overlay effects */
        .overlay-effect {
            position: absolute;
            inset: 0;
            pointer-events: none;
            background: radial-gradient(circle at center, transparent 60%, rgba(0,0,0,0.4) 100%);
            z-index: 10;
            opacity: 0.7;
        }
        
        /* Video.js Custom Styles */
        .video-js {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
        }
        
        .vjs-control-bar {
            background: rgba(0, 0, 0, 0.7) !important;
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            z-index: 3;
        }
        
        .vjs-big-play-button {
            background: rgba(0, 0, 0, 0.6) !important;
            border-radius: 50% !important;
            border: 2px solid white !important;
            width: 80px !important;
            height: 80px !important;
            line-height: 80px !important;
            z-index: 2;
        }

        .vjs-fullscreen-control {
            order: 10;
        }

        /* Mobile Optimizations */
        @media (max-width: 768px) {
            .quick-actions {
                min-width: 280px;
                padding: 15px;
                gap: 10px;
            }
            
            .quick-action-btn {
                padding: 12px;
            }
            
            .quick-action-btn i {
                font-size: 20px;
            }
            
            .player-controls {
                bottom: 40px;
                opacity: 1;
                padding: 15px 25px;
                background: rgba(0, 0, 0, 0.85);
            }
            
            .control-button {
                width: 48px;
                height: 48px;
                font-size: 28px;
            }

            .vjs-big-play-button {
                width: 60px !important;
                height: 60px !important;
                line-height: 60px !important;
            }
        }

        /* Fix for iOS touch events */
        @supports (-webkit-touch-callout: none) {
            .player-controls,
            .control-button,
            .quick-action-btn {
                cursor: default;
                -webkit-touch-callout: none;
                -webkit-user-select: none;
                -webkit-tap-highlight-color: transparent;
            }
        }
        
        /* Watch Party Styles */
        .watch-party-ui {
            position: fixed;
            right: 0;
            top: 0;
            bottom: 0;
            width: 320px;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(10px);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            z-index: 50;
            box-shadow: -5px 0 15px rgba(0, 0, 0, 0.3);
        }
        
        .watch-party-ui.active {
            transform: translateX(0);
        }
        
        #party-chat {
            scrollbar-width: thin;
            scrollbar-color: rgba(255, 255, 255, 0.2) transparent;
            padding: 1rem;
            overflow-y: auto;
            height: calc(100% - 180px);
        }
        
        #party-chat::-webkit-scrollbar {
            width: 6px;
        }
        
        #party-chat::-webkit-scrollbar-track {
            background: transparent;
        }
        
        #party-chat::-webkit-scrollbar-thumb {
            background-color: rgba(255, 255, 255, 0.2);
            border-radius: 3px;
        }
        
        .chat-message {
            max-width: 80%;
            margin-bottom: 1rem;
            padding: 0.75rem;
            border-radius: 1rem;
            position: relative;
            word-wrap: break-word;
        }
        
        .chat-message.host {
            margin-left: auto;
            background: linear-gradient(135deg, #4F46E5, #7C3AED);
            color: white;
            border-bottom-right-radius: 0.25rem;
        }
        
        .chat-message.guest {
            margin-right: auto;
            background: #1F2937;
            color: white;
            border-bottom-left-radius: 0.25rem;
        }
        
        .chat-message.own {
            margin-left: auto;
            background: linear-gradient(135deg, #059669, #10B981);
            color: white;
            border-bottom-right-radius: 0.25rem;
        }
        
        .chat-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .chat-input-container {
            padding: 1rem;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            background: rgba(0, 0, 0, 0.5);
        }
        
        .chat-input {
            width: 100%;
            padding: 0.75rem;
            border-radius: 1.5rem;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: none;
            outline: none;
        }
        
        .chat-input:focus {
            background: rgba(255, 255, 255, 0.15);
        }
        
        .party-member {
            display: inline-flex;
            align-items: center;
            padding: 0.5rem 1rem;
            border-radius: 1.5rem;
            background: rgba(255, 255, 255, 0.1);
            margin: 0.25rem;
            font-size: 0.875rem;
        }
        
        .party-member.host {
            background: linear-gradient(135deg, #4F46E5, #7C3AED);
        }
        
        .party-member i {
            margin-right: 0.5rem;
        }
        
        .timestamp {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 0.25rem;
        }
        
        .user-name {
            font-weight: bold;
            margin-bottom: 0.25rem;
        }
        
        .message-content {
            margin-bottom: 0.5rem;
        }
    </style>
</head>
<body>
    <!-- Mobile Device Note -->
    <div class="device-note fixed top-0 left-0 right-0 bg-black bg-opacity-90 text-white p-4 z-50 text-center text-sm md:hidden animate__animated animate__fadeIn">
        <i class="fas fa-info-circle text-green-500 mr-2"></i>
        <span>Double tap the player to access fullscreen and quick controls</span>
        <button class="close-note absolute right-2 top-1/2 transform -translate-y-1/2 p-2 text-gray-400 hover:text-white">
            <i class="fas fa-times"></i>
        </button>
    </div>
    
    <!-- Improved Loading Indicator -->
    <div class="loading animate__animated animate__fadeIn" id="loading">
        <div class="spinner-container">
            <div class="spinner-ring"></div>
            <div class="spinner"></div>
        </div>
        <p class="text-white text-lg font-medium animate__animated animate__fadeIn animate__delay-1s">Loading your stream...</p>
        <p class="text-gray-400 text-sm mt-2 animate__animated animate__fadeIn animate__delay-1s">Please wait while we prepare your content</p>
    </div>
    
    <div id="player-container">
        <!-- Video.js Player -->
        <video 
            id="video-player" 
            class="video-js vjs-default-skin vjs-big-play-centered"
            controls
            preload="auto"
            data-setup='{"fluid": true}'
        >
            <source src="<%= embedUrl %>" type="application/x-mpegURL">
            <p class="vjs-no-js">
                To view this video please enable JavaScript, and consider upgrading to a
                web browser that supports HTML5 video
            </p>
        </video>
        
        <!-- Quick Actions Menu -->
        <div class="quick-actions" id="quick-actions">
            <button class="quick-action-btn" id="quality-btn">
                <i class="fas fa-cog"></i>
                <span>Quality</span>
            </button>
            <button class="quick-action-btn" id="speed-btn">
                <i class="fas fa-tachometer-alt"></i>
                <span>Speed</span>
            </button>
            <button class="quick-action-btn" id="audio-btn">
                <i class="fas fa-volume-up"></i>
                <span>Audio</span>
            </button>
            <button class="quick-action-btn" id="subtitle-btn">
                <i class="fas fa-closed-captioning"></i>
                <span>Subtitles</span>
            </button>
            <button class="quick-action-btn" id="pip-btn">
                <i class="fas fa-external-link-alt"></i>
                <span>PiP Mode</span>
            </button>
            <button class="quick-action-btn" id="expand-btn">
                <i class="fas fa-expand"></i>
                <span>Expand</span>
            </button>
        </div>
        
        <div class="mobile-touch-overlay"></div>
        
        <div class="player-controls">
            <button class="control-button" id="play-button" aria-label="Play/Pause">
                <i class="fas fa-play"></i>
            </button>
            <button class="control-button" id="backward-button" aria-label="Rewind">
                <i class="fas fa-backward"></i>
            </button>
            <button class="control-button" id="forward-button" aria-label="Forward">
                <i class="fas fa-forward"></i>
            </button>
            <button class="control-button" id="fullscreen-button" aria-label="Toggle Fullscreen">
                <i class="fas fa-expand"></i>
            </button>
        </div>
    </div>
    
    <!-- Player Info Bar (appears on hover) -->
    <div class="player-info" id="player-info">
        <div class="flex items-center">
            <h1 class="text-white font-bold text-lg md:text-xl truncate max-w-[250px] sm:max-w-xs md:max-w-md">
                <i class="fas fa-play-circle text-green-500 mr-2"></i> 
                <span id="content-title">StreamAPI Player</span>
            </h1>
        </div>
        <div class="text-gray-300 text-sm hidden sm:block">
            <i class="fas fa-signal mr-1"></i> <span id="quality-indicator">HD</span>
        </div>
    </div>
    
    <!-- Additional Controls (left side) -->
    <div class="additional-controls">
        <button class="control-btn" id="back-btn" title="Back to Details">
            <i class="fas fa-arrow-left"></i>
        </button>
    </div>
    
    <!-- Main Controls (right side) -->
    <div class="controls">
        <button class="control-btn" id="fullscreen-btn" title="Full Screen">
            <i class="fas fa-expand"></i>
        </button>
        <button class="control-btn" id="close-btn" title="Close Player">
            <i class="fas fa-times"></i>
        </button>
    </div>
    
    <!-- Watch Party UI -->
    <div class="watch-party-ui fixed right-0 top-0 bottom-0 w-80 bg-black bg-opacity-90 backdrop-blur-lg transform translate-x-full transition-transform duration-300 z-50" id="watch-party-ui">
        <div class="h-full flex flex-col">
            <!-- Party Header -->
            <div class="p-4 border-b border-gray-800">
                <div class="flex items-center justify-between mb-2">
                    <h3 class="text-lg font-bold text-white">Watch Party</h3>
                    <button class="text-gray-400 hover:text-white" id="close-party-ui">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="flex items-center space-x-2">
                    <span class="text-sm text-green-400">
                        <i class="fas fa-users mr-1"></i>
                        <span id="party-member-count">0</span> watching
                    </span>
                    <button class="ml-auto text-sm text-blue-400 hover:text-blue-300" id="copy-party-link">
                        <i class="fas fa-link mr-1"></i> Copy Link
                    </button>
                </div>
            </div>
            
            <!-- Party Members -->
            <div class="p-4 border-b border-gray-800">
                <div class="flex flex-wrap gap-2" id="party-members"></div>
            </div>
            
            <!-- Chat Section -->
            <div class="flex-1 overflow-y-auto p-4" id="party-chat">
                <div class="space-y-4" id="chat-messages"></div>
            </div>
            
            <!-- Chat Input -->
            <div class="p-4 border-t border-gray-800">
                <div class="flex items-center space-x-2">
                    <input type="text" id="chat-input" placeholder="Type a message..." class="flex-1 bg-gray-800 text-white rounded px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <button id="send-chat" class="bg-blue-500 text-white rounded px-4 py-2 text-sm hover:bg-blue-600 transition">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Watch Party Button -->
    <button class="control-button watch-party-btn" id="watch-party-btn" title="Watch Party">
        <i class="fas fa-users"></i>
    </button>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Video.js Script -->
    <script src="https://vjs.zencdn.net/8.10.0/video.min.js"></script>
    <!-- Custom player script -->
    <script src="/js/player.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const loading = document.getElementById('loading');
            const playerContainer = document.getElementById('player-container');
            const playerIframe = document.getElementById('player-iframe');
            const playerInfo = document.getElementById('player-info');
            const fullscreenBtn = document.getElementById('fullscreen-btn');
            const closeBtn = document.getElementById('close-btn');
            const backBtn = document.getElementById('back-btn');
            const contentTitle = document.getElementById('content-title');
            const qualityIndicator = document.getElementById('quality-indicator');
            
            // Set content title if available
            if (window.location.search) {
                const params = new URLSearchParams(window.location.search);
                if (params.get('title')) {
                    contentTitle.textContent = params.get('title');
                }
            }
            
            // Enhanced loading effect with better transitions
            playerIframe.addEventListener('load', function() {
                setTimeout(() => {
                    loading.classList.add('animate__fadeOut');
                    setTimeout(() => {
                        loading.style.display = 'none';
                    }, 500);
                    playerContainer.classList.add('loaded');
                }, 1500); // Slightly longer delay for better user experience
            });
            
            // Auto-hide player info after 5 seconds
            let infoTimeout = setTimeout(() => {
                playerInfo.classList.add('hidden');
            }, 5000);
            
            // Show/hide player info on mouse movement
            document.addEventListener('mousemove', function() {
                playerInfo.classList.remove('hidden');
                clearTimeout(infoTimeout);
                infoTimeout = setTimeout(() => {
                    playerInfo.classList.add('hidden');
                }, 5000);
            });
            
            // Fullscreen functionality with enhanced error handling
            fullscreenBtn.addEventListener('click', function() {
                try {
                    if (document.fullscreenElement) {
                        document.exitFullscreen().catch(err => {
                            console.warn(`Error attempting to exit fullscreen: ${err.message}`);
                            // Fallback for browsers that don't support standard fullscreen API
                            if (document.webkitExitFullscreen) {
                                document.webkitExitFullscreen();
                            } else if (document.mozCancelFullScreen) {
                                document.mozCancelFullScreen();
                            } else if (document.msExitFullscreen) {
                                document.msExitFullscreen();
                            }
                        });
                    } else {
                        const elem = playerContainer;
                        if (elem.requestFullscreen) {
                            elem.requestFullscreen().catch(err => {
                                console.warn(`Error attempting to enable fullscreen: ${err.message}`);
                            });
                        } else if (elem.webkitRequestFullscreen) { /* Safari */
                            elem.webkitRequestFullscreen();
                        } else if (elem.msRequestFullscreen) { /* IE11 */
                            elem.msRequestFullscreen();
                        }
                    }
                } catch (err) {
                    console.error('Fullscreen error:', err);
                }
            });
            
            // Back button functionality
            backBtn.addEventListener('click', function() {
                window.history.back();
            });
            
            // Close player functionality
            closeBtn.addEventListener('click', function() {
                window.close();
            });
            
            // Handle escape key for fullscreen and esc key for back
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && document.fullscreenElement) {
                    document.exitFullscreen();
                }
                // Use backspace for back functionality
                if (e.key === 'Backspace') {
                    window.history.back();
                }
            });
            
            // Support for mobile devices - detect orientation change
            window.addEventListener('orientationchange', function() {
                // Force layout recalculation to ensure proper display
                setTimeout(() => {
                    const currentHeight = window.innerHeight;
                    document.body.style.height = `${currentHeight}px`;
                }, 100);
            });
            
            // Update fullscreen button icon with better cross-browser support
            document.addEventListener('fullscreenchange', updateFullscreenButton);
            document.addEventListener('webkitfullscreenchange', updateFullscreenButton);
            document.addEventListener('mozfullscreenchange', updateFullscreenButton);
            document.addEventListener('MSFullscreenChange', updateFullscreenButton);
            
            function updateFullscreenButton() {
                if (document.fullscreenElement || document.webkitFullscreenElement || 
                    document.mozFullScreenElement || document.msFullscreenElement) {
                    fullscreenBtn.innerHTML = '<i class="fas fa-compress"></i>';
                    fullscreenBtn.title = 'Exit Full Screen';
                } else {
                    fullscreenBtn.innerHTML = '<i class="fas fa-expand"></i>';
                    fullscreenBtn.title = 'Full Screen';
                }
            }
            
            // Simulate quality changes (for visual effect)
            setTimeout(() => {
                qualityIndicator.textContent = 'HD 1080p';
            }, 3000);
            
            // Fix for iOS Safari viewport height issues
            function fixViewportHeight() {
                document.documentElement.style.setProperty('--vh', `${window.innerHeight * 0.01}px`);
            }
            
            window.addEventListener('resize', fixViewportHeight);
            fixViewportHeight();
            
            // Add note dismissal functionality
            const deviceNote = document.querySelector('.device-note');
            const closeNote = document.querySelector('.close-note');
            
            if (closeNote && deviceNote) {
                closeNote.addEventListener('click', () => {
                    deviceNote.classList.add('animate__fadeOut');
                    setTimeout(() => {
                        deviceNote.style.display = 'none';
                    }, 500);
                    
                    // Store the preference
                    localStorage.setItem('hidePlayerNote', 'true');
                });
                
                // Check if note was previously dismissed
                if (localStorage.getItem('hidePlayerNote') === 'true') {
                    deviceNote.style.display = 'none';
                }
            }
        });
        
        // Progress tracking functionality
        let lastProgressUpdate = 0;
        const PROGRESS_UPDATE_INTERVAL = 5000; // Update every 5 seconds
        
        function generateUserId() {
            let userId = localStorage.getItem('userId');
            if (!userId) {
                userId = 'user_' + Math.random().toString(36).substr(2, 9);
                localStorage.setItem('userId', userId);
            }
            return userId;
        }
        
        function updateWatchProgress(currentTime, duration) {
            const now = Date.now();
            if (now - lastProgressUpdate < PROGRESS_UPDATE_INTERVAL) return;
            
            const progress = {
                currentTime,
                duration,
                percentage: (currentTime / duration) * 100,
                title: '<%= title %>',
                poster_path: '<%= poster %>',
                timestamp: new Date().toISOString()
            };
            
            const userId = generateUserId();
            
            fetch('/api/continue-watching/progress', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    userId,
                    mediaId: '<%= id %>',
                    mediaType: '<%= type %>',
                    progress
                })
            }).catch(console.error);
            
            lastProgressUpdate = now;
        }
        
        // Add event listener for video time updates
        document.addEventListener('DOMContentLoaded', function() {
            const videoElement = document.querySelector('video');
            if (videoElement) {
                videoElement.addEventListener('timeupdate', function() {
                    updateWatchProgress(this.currentTime, this.duration);
                });
            }
            
            // Load saved progress if available
            const userId = generateUserId();
            fetch(`/api/continue-watching/${userId}/<%= id %>`)
                .then(response => response.json())
                .then(data => {
                    if (data && data.progress && data.progress.currentTime) {
                        if (videoElement) {
                            videoElement.currentTime = data.progress.currentTime;
                        }
                    }
                })
                .catch(console.error);
        });
        
        // Watch Party Functionality
        document.addEventListener('DOMContentLoaded', function() {
            const watchPartyBtn = document.getElementById('watch-party-btn');
            const watchPartyUI = document.getElementById('watch-party-ui');
            const closePartyUI = document.getElementById('close-party-ui');
            const copyPartyLink = document.getElementById('copy-party-link');
            const partyMemberCount = document.getElementById('party-member-count');
            const partyMembers = document.getElementById('party-members');
            const chatMessages = document.getElementById('chat-messages');
            const chatInput = document.getElementById('chat-input');
            const sendChat = document.getElementById('send-chat');
            
            let ws;
            let userId = generateUserId();
            let partyId = null;
            
            // Initialize WebSocket connection
            function initializeWebSocket() {
                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                ws = new WebSocket(`${protocol}//${window.location.host}`);
                
                ws.onopen = function() {
                    console.log('WebSocket connected');
                    // If we have a party ID from URL, join it after connection
                    const urlParams = new URLSearchParams(window.location.search);
                    const urlPartyId = urlParams.get('party');
                    if (urlPartyId) {
                        joinParty(urlPartyId);
                    }
                };
                
                ws.onmessage = function(event) {
                    const message = JSON.parse(event.data);
                    handleWebSocketMessage(message);
                };
                
                ws.onclose = function() {
                    console.log('WebSocket disconnected, attempting to reconnect...');
                    setTimeout(initializeWebSocket, 1000);
                };
                
                ws.onerror = function(error) {
                    console.error('WebSocket error:', error);
                };
            }
            
            function handleWebSocketMessage(message) {
                switch (message.type) {
                    case 'partyUpdate':
                        updatePartyUI(message.party);
                        break;
                    case 'playbackUpdate':
                        updatePlayback(message);
                        break;
                    case 'partyChat':
                        addChatMessage(message);
                        break;
                    case 'error':
                        console.error('Party error:', message.error);
                        alert(message.error);
                        break;
                }
            }
            
            function updatePartyUI(party) {
                if (!party) return;
                
                partyMemberCount.textContent = party.members.length;
                
                // Update members list
                partyMembers.innerHTML = party.members.map(memberId => `
                    <div class="party-member ${memberId === party.hostId ? 'host' : ''}">
                        <i class="fas ${memberId === party.hostId ? 'fa-crown' : 'fa-user'}"></i>
                        <span>${memberId === userId ? 'You' : 'Guest'}</span>
                    </div>
                `).join('');
            }
            
            function updatePlayback(message) {
                const videoElement = document.querySelector('video');
                if (!videoElement) return;
                
                if (Math.abs(videoElement.currentTime - message.currentTime) > 1) {
                    videoElement.currentTime = message.currentTime;
                }
                
                if (message.isPlaying && videoElement.paused) {
                    videoElement.play();
                } else if (!message.isPlaying && !videoElement.paused) {
                    videoElement.pause();
                }
            }
            
            function addChatMessage(message) {
                const isHost = message.userId === watchPartyStorage.getParty(partyId)?.hostId;
                const isOwn = message.userId === userId;
                const messageEl = document.createElement('div');
                messageEl.className = `chat-message ${isHost ? 'host' : isOwn ? 'own' : 'guest'}`;
                messageEl.innerHTML = `
                    <div class="user-name">${isOwn ? 'You' : isHost ? 'Host' : 'Guest'}</div>
                    <div class="message-content">${message.text}</div>
                    <div class="timestamp">${new Date(message.timestamp).toLocaleTimeString()}</div>
                `;
                chatMessages.appendChild(messageEl);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            
            // Create watch party
            async function createWatchParty() {
                try {
                    const response = await fetch('/api/watch-party/create', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            hostId: userId,
                            mediaId: '<%= id %>',
                            mediaType: '<%= type %>',
                            title: '<%= title %>',
                            config: {
                                maxMembers: 10,
                                isPrivate: false,
                                password: null
                            }
                        })
                    });
                    
                    const data = await response.json();
                    if (data.success && data.party) {
                        partyId = data.party.id;
                        // Join the party after creation
                        if (ws.readyState === WebSocket.OPEN) {
                            ws.send(JSON.stringify({
                                type: 'joinParty',
                                partyId: partyId,
                                userId: userId
                            }));
                            watchPartyUI.classList.add('active');
                        } else {
                            console.error('WebSocket not connected');
                            alert('Connection error. Please try again.');
                        }
                    } else {
                        throw new Error(data.error || 'Failed to create watch party');
                    }
                } catch (error) {
                    console.error('Error creating watch party:', error);
                    alert('Failed to create watch party. Please try again.');
                }
            }
            
            function joinParty(joinPartyId) {
                if (ws.readyState === WebSocket.OPEN) {
                    partyId = joinPartyId;
                    ws.send(JSON.stringify({
                        type: 'joinParty',
                        partyId: joinPartyId,
                        userId: userId
                    }));
                    watchPartyUI.classList.add('active');
                } else {
                    console.error('WebSocket not connected');
                    alert('Connection error. Please try again.');
                }
            }
            
            // Event listeners
            watchPartyBtn.addEventListener('click', () => {
                if (!partyId) {
                    createWatchParty();
                } else {
                    watchPartyUI.classList.toggle('active');
                }
            });
            
            closePartyUI.addEventListener('click', () => {
                watchPartyUI.classList.remove('active');
            });
            
            copyPartyLink.addEventListener('click', () => {
                if (!partyId) return;
                const partyUrl = `${window.location.origin}/api/player?id=<%= id %>&type=<%= type %>&title=${encodeURIComponent('<%= title %>')}&party=${partyId}`;
                navigator.clipboard.writeText(partyUrl).then(() => {
                    alert('Party link copied to clipboard!');
                });
            });
            
            sendChat.addEventListener('click', () => {
                const text = chatInput.value.trim();
                if (text && partyId && ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify({
                        type: 'partyChat',
                        partyId,
                        userId,
                        text
                    }));
                    chatInput.value = '';
                }
            });
            
            chatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    sendChat.click();
                }
            });
            
            // Handle video events for host
            const videoElement = document.querySelector('video');
            if (videoElement) {
                videoElement.addEventListener('play', () => {
                    if (partyId && ws.readyState === WebSocket.OPEN) {
                        ws.send(JSON.stringify({
                            type: 'playbackUpdate',
                            partyId,
                            userId,
                            currentTime: videoElement.currentTime,
                            isPlaying: true
                        }));
                    }
                });
                
                videoElement.addEventListener('pause', () => {
                    if (partyId && ws.readyState === WebSocket.OPEN) {
                        ws.send(JSON.stringify({
                            type: 'playbackUpdate',
                            partyId,
                            userId,
                            currentTime: videoElement.currentTime,
                            isPlaying: false
                        }));
                    }
                });
                
                videoElement.addEventListener('seeked', () => {
                    if (partyId && ws.readyState === WebSocket.OPEN) {
                        ws.send(JSON.stringify({
                            type: 'playbackUpdate',
                            partyId,
                            userId,
                            currentTime: videoElement.currentTime,
                            isPlaying: !videoElement.paused
                        }));
                    }
                });
            }
            
            // Initialize WebSocket
            initializeWebSocket();
        });
    </script>
</body>
</html> 