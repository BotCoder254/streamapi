<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title><%= title %> - StreamAPI Player</title>
    <!-- Tailwind CSS via CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Animation library -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #000;
            overflow: hidden;
        }
        
        #player-container {
            position: relative;
            width: 100vw;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            touch-action: none;
        }
        
        #player-iframe {
            width: 100%;
            height: 100%;
            border: none;
        }
        
        .player-controls {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 20px;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s ease;
            background: rgba(0, 0, 0, 0.7);
            padding: 10px 20px;
            border-radius: 30px;
            pointer-events: none;
        }
        
        #player-container:hover .player-controls {
            opacity: 1;
        }
        
        .control-button {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 10px;
            transition: transform 0.2s ease;
            pointer-events: auto;
        }
        
        .control-button:hover {
            transform: scale(1.1);
        }
        
        .mobile-touch-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 999;
            display: none;
        }
        
        @media (max-width: 768px) {
            .mobile-touch-overlay {
                display: block;
            }
            
            .player-controls {
                bottom: 40px;
                opacity: 1;
            }
        }
        
        .ad-overlay {
            display: none !important;
        }
        
        [class*="ad-"], [id*="ad-"],
        [class*="popup"], [id*="popup"] {
            display: none !important;
        }
        
        /* Improved loading animation */
        .loading {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 30;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
        }
        
        @keyframes pulse-ring {
            0% { transform: scale(0.8); opacity: 0.8; }
            50% { transform: scale(1.1); opacity: 0.5; }
            100% { transform: scale(0.8); opacity: 0.8; }
        }
        
        @keyframes pulse-dot {
            0% { transform: scale(0.8); }
            50% { transform: scale(1); }
            100% { transform: scale(0.8); }
        }
        
        .spinner-container {
            position: relative;
            margin-bottom: 24px;
        }
        
        .spinner-ring {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background-color: rgba(16, 185, 129, 0.2);
            animation: pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite;
        }
        
        .spinner {
            position: relative;
            width: 60px;
            height: 60px;
            border: 3px solid rgba(255, 255, 255, 0.1);
            border-left-color: #10B981;
            border-radius: 50%;
            animation: spin 1s linear infinite, pulse-dot 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .iframe-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            transition: opacity 0.8s ease;
        }
        
        .iframe-container.loaded {
            opacity: 1;
        }
        
        iframe {
            width: 100%;
            height: 100%;
            border: none;
            background-color: #000;
        }
        
        /* Top info bar */
        .player-info {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            padding: 16px 20px;
            background: linear-gradient(to bottom, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0) 100%);
            z-index: 20;
            display: flex;
            justify-content: space-between;
            align-items: center;
            opacity: 1;
            transition: opacity 0.3s ease, transform 0.3s ease;
            transform: translateY(0);
        }
        
        .player-info.hidden {
            opacity: 0;
            transform: translateY(-100%);
        }
        
        /* Additional player controls */
        .additional-controls {
            position: absolute;
            bottom: 20px;
            left: 20px;
            z-index: 20;
            display: flex;
            gap: 12px;
        }
        
        @media (max-width: 640px) {
            .additional-controls {
                bottom: 15px;
                left: 15px;
            }
        }
        
        /* Custom video overlay effects */
        .overlay-effect {
            position: absolute;
            inset: 0;
            pointer-events: none;
            background: radial-gradient(circle at center, transparent 60%, rgba(0,0,0,0.4) 100%);
            z-index: 10;
            opacity: 0.7;
        }
    </style>
</head>
<body>
    <!-- Improved Loading Indicator -->
    <div class="loading animate__animated animate__fadeIn" id="loading">
        <div class="spinner-container">
            <div class="spinner-ring"></div>
            <div class="spinner"></div>
        </div>
        <p class="text-white text-lg font-medium animate__animated animate__fadeIn animate__delay-1s">Loading your stream...</p>
        <p class="text-gray-400 text-sm mt-2 animate__animated animate__fadeIn animate__delay-1s">Please wait while we prepare your content</p>
    </div>
    
    <div id="player-container">
        <iframe 
            id="player-iframe"
            src="<%= embedUrl %>"
            allowfullscreen
            allow="encrypted-media"
            sandbox="allow-same-origin allow-scripts allow-forms allow-presentation"
        ></iframe>
        
        <div class="mobile-touch-overlay"></div>
        
        <div class="player-controls">
            <button class="control-button" id="play-button">
                <i class="fas fa-play"></i>
            </button>
            <button class="control-button" id="backward-button">
                <i class="fas fa-backward"></i>
            </button>
            <button class="control-button" id="forward-button">
                <i class="fas fa-forward"></i>
            </button>
            <button class="control-button" id="fullscreen-button">
                <i class="fas fa-expand"></i>
            </button>
        </div>
    </div>
    
    <!-- Player Info Bar (appears on hover) -->
    <div class="player-info" id="player-info">
        <div class="flex items-center">
            <h1 class="text-white font-bold text-lg md:text-xl truncate max-w-[250px] sm:max-w-xs md:max-w-md">
                <i class="fas fa-play-circle text-green-500 mr-2"></i> 
                <span id="content-title">StreamAPI Player</span>
            </h1>
        </div>
        <div class="text-gray-300 text-sm hidden sm:block">
            <i class="fas fa-signal mr-1"></i> <span id="quality-indicator">HD</span>
        </div>
    </div>
    
    <!-- Additional Controls (left side) -->
    <div class="additional-controls">
        <button class="control-btn" id="back-btn" title="Back to Details">
            <i class="fas fa-arrow-left"></i>
        </button>
    </div>
    
    <!-- Main Controls (right side) -->
    <div class="controls">
        <button class="control-btn" id="fullscreen-btn" title="Full Screen">
            <i class="fas fa-expand"></i>
        </button>
        <button class="control-btn" id="close-btn" title="Close Player">
            <i class="fas fa-times"></i>
        </button>
    </div>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Custom player script -->
    <script src="/js/player.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const loading = document.getElementById('loading');
            const playerContainer = document.getElementById('player-container');
            const playerIframe = document.getElementById('player-iframe');
            const playerInfo = document.getElementById('player-info');
            const fullscreenBtn = document.getElementById('fullscreen-btn');
            const closeBtn = document.getElementById('close-btn');
            const backBtn = document.getElementById('back-btn');
            const contentTitle = document.getElementById('content-title');
            const qualityIndicator = document.getElementById('quality-indicator');
            
            // Set content title if available
            if (window.location.search) {
                const params = new URLSearchParams(window.location.search);
                if (params.get('title')) {
                    contentTitle.textContent = params.get('title');
                }
            }
            
            // Enhanced loading effect with better transitions
            playerIframe.addEventListener('load', function() {
                setTimeout(() => {
                    loading.classList.add('animate__fadeOut');
                    setTimeout(() => {
                        loading.style.display = 'none';
                    }, 500);
                    playerContainer.classList.add('loaded');
                }, 1500); // Slightly longer delay for better user experience
            });
            
            // Auto-hide player info after 5 seconds
            let infoTimeout = setTimeout(() => {
                playerInfo.classList.add('hidden');
            }, 5000);
            
            // Show/hide player info on mouse movement
            document.addEventListener('mousemove', function() {
                playerInfo.classList.remove('hidden');
                clearTimeout(infoTimeout);
                infoTimeout = setTimeout(() => {
                    playerInfo.classList.add('hidden');
                }, 5000);
            });
            
            // Fullscreen functionality with enhanced error handling
            fullscreenBtn.addEventListener('click', function() {
                try {
                    if (document.fullscreenElement) {
                        document.exitFullscreen().catch(err => {
                            console.warn(`Error attempting to exit fullscreen: ${err.message}`);
                            // Fallback for browsers that don't support standard fullscreen API
                            if (document.webkitExitFullscreen) {
                                document.webkitExitFullscreen();
                            } else if (document.mozCancelFullScreen) {
                                document.mozCancelFullScreen();
                            } else if (document.msExitFullscreen) {
                                document.msExitFullscreen();
                            }
                        });
                    } else {
                        const elem = playerContainer;
                        if (elem.requestFullscreen) {
                            elem.requestFullscreen().catch(err => {
                                console.warn(`Error attempting to enable fullscreen: ${err.message}`);
                            });
                        } else if (elem.webkitRequestFullscreen) { /* Safari */
                            elem.webkitRequestFullscreen();
                        } else if (elem.msRequestFullscreen) { /* IE11 */
                            elem.msRequestFullscreen();
                        }
                    }
                } catch (err) {
                    console.error('Fullscreen error:', err);
                }
            });
            
            // Back button functionality
            backBtn.addEventListener('click', function() {
                window.history.back();
            });
            
            // Close player functionality
            closeBtn.addEventListener('click', function() {
                window.close();
            });
            
            // Handle escape key for fullscreen and esc key for back
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && document.fullscreenElement) {
                    document.exitFullscreen();
                }
                // Use backspace for back functionality
                if (e.key === 'Backspace') {
                    window.history.back();
                }
            });
            
            // Support for mobile devices - detect orientation change
            window.addEventListener('orientationchange', function() {
                // Force layout recalculation to ensure proper display
                setTimeout(() => {
                    const currentHeight = window.innerHeight;
                    document.body.style.height = `${currentHeight}px`;
                }, 100);
            });
            
            // Update fullscreen button icon with better cross-browser support
            document.addEventListener('fullscreenchange', updateFullscreenButton);
            document.addEventListener('webkitfullscreenchange', updateFullscreenButton);
            document.addEventListener('mozfullscreenchange', updateFullscreenButton);
            document.addEventListener('MSFullscreenChange', updateFullscreenButton);
            
            function updateFullscreenButton() {
                if (document.fullscreenElement || document.webkitFullscreenElement || 
                    document.mozFullScreenElement || document.msFullscreenElement) {
                    fullscreenBtn.innerHTML = '<i class="fas fa-compress"></i>';
                    fullscreenBtn.title = 'Exit Full Screen';
                } else {
                    fullscreenBtn.innerHTML = '<i class="fas fa-expand"></i>';
                    fullscreenBtn.title = 'Full Screen';
                }
            }
            
            // Simulate quality changes (for visual effect)
            setTimeout(() => {
                qualityIndicator.textContent = 'HD 1080p';
            }, 3000);
            
            // Fix for iOS Safari viewport height issues
            function fixViewportHeight() {
                document.documentElement.style.setProperty('--vh', `${window.innerHeight * 0.01}px`);
            }
            
            window.addEventListener('resize', fixViewportHeight);
            fixViewportHeight();
        });
    </script>
</body>
</html> 